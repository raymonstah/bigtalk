AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  PollerRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      RoleName: big-talk-poller-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "secrets"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "ssm:DescribeParameter*"
                  - "ssm:GetParameter*"
                Effect: "Allow"
                Resource: "*"
        - PolicyName: "dynamodb"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt QuestionsTable.Arn
                  - !Sub "${QuestionsTable.Arn}/index/*"
        - PolicyName: "sqs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                Resource:
                  - !GetAtt QuestionsQueue.Arn

  QuestionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "question_id"
          AttributeType: "S"
        - AttributeName: "post_key"
          AttributeType: "S"
        - AttributeName: "post_count"
          AttributeType: "N"
      GlobalSecondaryIndexes:
        - IndexName: "poll-index"
          KeySchema:
            - AttributeName: "post_key"
              KeyType: "HASH"
            - AttributeName: "post_count"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      KeySchema:
        - AttributeName: "question_id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: "questions"


  PollerFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Role: !GetAtt PollerRole.Arn
      Handler: poller
      Runtime: go1.x
      CodeUri: s3://bt-lambdas/poller.zip
      Environment:
        Variables:
          QUESTIONS_QUEUE: !GetAtt QuestionsQueue.Arn

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Invoke the poller every now and then"
      ScheduleExpression: "rate(10 minutes)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "PollerFunction"
              - "Arn"
          Id: "PollerTargetFunction"

  PollerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "PollerFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"


  PosterFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Role: !GetAtt PollerRole.Arn
      Handler: poster
      Runtime: go1.x
      CodeUri: s3://bt-lambdas/poster.zip

  QuestionsQueue:
    Type: AWS::SQS::Queue

  # A lambda to handle CRUD on Questions
  QuestionsRestLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Role: !GetAtt QuestionsRestLambdaRole.Arn
      Handler: questions-rest
      Runtime: go1.x
      CodeUri: s3://bt-lambdas/questions-rest.zip

  QuestionsRestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      RoleName: big-talk-lambda-rest-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "secrets"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "ssm:DescribeParameter*"
                  - "ssm:GetParameter*"
                Effect: "Allow"
                Resource: "*"
        - PolicyName: "dynamodb"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt QuestionsTable.Arn
                  - !Sub "${QuestionsTable.Arn}/index/*"

  #  QUESTIONS REST API HERE
  QuestionsRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: QuestionsApi

  QuestionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: questions
      ParentId: !GetAtt QuestionsRestAPI.RootResourceId
      RestApiId: !Ref QuestionsRestAPI

  QuestionsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RestApiId: !Ref QuestionsRestAPI
      AuthorizationType: NONE
      ResourceId: !Ref QuestionsResource

      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuestionsRestLambda.Arn}/invocations

  QuestionApiInvokerRole:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt QuestionsRestLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub >-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuestionsResource}/*/*/*
